# -*- coding: utf-8 -*-
"""process.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UtsyRIgRThCfmLoFfpnH_x5eBazPyVgF
"""

import tui

# process.py

def unique_columns(df, column_name):
    tui.started(f"Fetching unique values for column {column_name}")
    column_name_list = df[column_name].unique()

    for d in column_name_list:
        print(d)
        d = d.lower()
    return column_name_list

def A1(data):
    patient_ID = input("Enter a patient ID: ").strip()

    found = False
    patient_info = {"Age": "", "Gender": "", "Smoking history": "", "Ethnicity": ""}

    if patient_ID in data[0]:
        found = True
        data = data[(data[0] == patient_ID)]
        #data[(data[0] == patient_ID)][1]
        patient_info = {"Age": data[1], "Gender": data[2], "Smoking history": data[3], "Ethnicity": data[9]}

    tui.started(f"Retrieving demographic information for patient ID {patient_ID}")
    tui.display_A1(found, patient_info)
    tui.completed()

def A2(data):
    # List out all ethnicities
    ethnicity_list = []
    print("List of ethnicities: ")

    for r in data:
        if r[9].lower() not in ethnicity_list:
            ethnicity_list.append(r[9].lower())
            print(r[9])
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()
    count = input("Enter the amount of display data (all data will be displayed if left blank): ").strip()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    ethnicity_history = []

    for r in data:
        if(r[9].lower() == ethnicity):
            ethnicity_history.append(r[11])
            ethnicity_history.append(r[12])
            ethnicity_history.append(r[16])
            ethnicity_history.append(r[23])

    if count.isdigit() and len(ethnicity_history) > (int(count) * 4):
        count = int(count) * 4
    else:
        count = len(ethnicity_history)

    tui.started(f"Retrieving medical history details by ethnicity {Ethnicity}")
    tui.display_A2(ethnicity_history, count)
    tui.completed()

def A3(data):
    # List out all treatment types
    treatment_list = []
    print("List of treatment types: ")

    for r in data:
        if r[7].lower() not in treatment_list:
            treatment_list.append(r[7].lower())
            print(r[7])

    treatment = input("Enter a treatment type: ").strip().lower()
    count = input("Enter the amount of display data (all data will be displayed if left blank): ").strip()

    found = False
    treatment_details = []

    if treatment in treatment_list:
        found = True
        for r in data:
            if(r[7].lower() == treatment and int(r[8]) > 100):
                treatment_details.append(r[1])
                treatment_details.append(r[4])
                treatment_details.append(r[5])
                treatment_details.append(r[6])

    if count.isdigit() and len(treatment_details) > (int(count) * 4):
      count = int(count) * 4
    else:
      count = len(treatment_details)

    tui.started(f"Retrieving patient details for treatment type {treatment}")
    tui.display_A3(found, treatment_details, count)
    tui.completed()

def A4(data, headings):
    # Retrieve the frequency of data occurrences by column
    # Columns 1, 2, 3, 5 to 22

    columns = {}
    reversed_columns = {}
    index = 0

    for h in headings:
        if h != "Patient_ID" and h != "Tumor_Size_mm":
            columns[h] = index
            reversed_columns[index] = h
            if h == "Blood_Pressure_Pulse":
                break
        index += 1

    print("Please select the column items to display: ")
    index = 0
    for k, v in columns.items():
        index += 1
        print(f"[{index}] {k}")

    found = False

    selected_column = input().strip()
    if selected_column.isdigit():
        selected_column = int(selected_column)

        if selected_column > 3:
            selected_column += 1

        if selected_column in reversed_columns.keys():
            found = True

            print(f"Selected column: {reversed_columns[selected_column]}\n")

            item_dict = {}

            for r in data:
                if reversed_columns[selected_column] != "Stage":
                    key = reversed_columns[selected_column] + " " + r[selected_column]
                else:
                    key = r[selected_column]

                if key not in item_dict.keys():
                    item_dict[key] = 1
                else:
                    value = item_dict[key]
                    item_dict[key] = value + 1

            tui.started(f"Retrieving the frequency of data occurrences for column {reversed_columns[selected_column]}")
            tui.display_A4(found, item_dict)
            tui.completed()

def B1(df):
    # List out all ethnicities
    print("List of ethnicities: ")
    ethnicity_list = unique_columns(df, 'Ethnicity')
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    filtered_df = df[(df['Ethnicity'].str.lower() == ethnicity) & (df['Survival_Months'] > 100)]
    treat_df = filtered_df.groupby('Treatment').size().sort_values(inplace =False, ascending=False)
    treat_df = treat_df.rename('Occurences')

    tui.started(f"Identifying top three treatments for ethnicity {ethnicity}")
    tui.display_B1(ethnicity, treat_df)
    tui.completed()

def B2(df):
    # List out all ethnicities
    print("List of ethnicities: ")
    ethnicity_list = unique_columns(df, 'Ethnicity')
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()
    print()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    # List out all treatment types
    print("List of treatment types: ")
    unique_columns(df, 'Treatment')

    treatment_type = input("Enter a treatment type: ").strip().lower()
    print()

    filtered_df = df[(df['Ethnicity'].str.lower() == ethnicity) & (df['Treatment'].str.lower() == treatment_type)]

    treat_df = round(filtered_df.groupby('Treatment').White_Blood_Cell_Count.mean(), 2)

    tui.started(f"Analysing average white blood cell counts for ethnicity {ethnicity} and treatment type {treatment_type}")
    tui.display_B2(treat_df, ethnicity)
    tui.completed()

def B3(df):
    # List out all tumor locations
    print("List of tumor locations: ")
    unique_columns(df, 'Tumor_Location')

    tumor_location = input("Enter a tumor location: ").strip().lower()
    print()

    filtered_df = df[(df['Blood_Pressure_Pulse'] > 90) & (df['Tumor_Size_mm'] < 15.0)]

    # List out all treatment types
    print("List of treatment types: ")
    unique_columns(df, 'Treatment')

    treatment_type = input("Enter a treatment type: ").strip().lower()
    print()

    treat_df = filtered_df[(filtered_df['Tumor_Location'].str.lower() == tumor_location) & (filtered_df['Treatment'].str.lower() == treatment_type)]
    t_df = round(treat_df.groupby(['Treatment', 'Tumor_Location']).Smoking_Pack_Years.mean(), 2)

    tui.started(f"Analysing average number of smoking packs for tumor location {tumor_location} and treatment type {treatment_type}")
    tui.display_B3(t_df, tumor_location, treatment_type)
    tui.completed()

def B4(df):
    # Average survival months for specific cancer stage and treatment type
    # "Stage" ... Stage I, II, III, IV ... "Treatment" and "Survival_Months"

    # List out all cancer stages
    print("List of lung cancer stages: ")
    unique_columns(df, 'Stage')

    cancer_stage = input("Enter a cancer stage: ").strip().lower()
    print()

    # List out all treatment types
    print("List of treatment types: ")
    unique_columns(df, 'Treatment')

    treatment_type = input("Enter a treatment type: ").strip().lower()
    print()

    filtered_df = df[(df['Stage'].str.lower() == cancer_stage) & (df['Treatment'].str.lower() == treatment_type)]
    survival_df = round(filtered_df.groupby(['Treatment', 'Stage']).Survival_Months.mean(), 1)

    tui.started(f"Analysing average number of survival months for lung cancer {cancer_stage} and treatment type {treatment_type}")
    tui.display_B4(survival_df, cancer_stage, treatment_type)
    tui.completed()

def C1(df):
    # List out all ethnicities
    print("List of ethnicities: ")
    ethnicity_list = unique_columns(df, 'Ethnicity')
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    filtered_df = df[(df['Ethnicity'].str.lower() == ethnicity)]
    treat_df = filtered_df.groupby('Treatment').size().sort_values(inplace=False, ascending=False)
    treat_df = treat_df.rename('Occurences')
    t_df = pd.DataFrame(treat_df.reset_index())

    tui.started(f"Visualizing proportion of cancer treatments for ethnicity {ethnicity}")
    tui.display_C1(t_df, ethnicity)
    tui.completed()

def C2(df):
    # create a figure
    fig = plt.figure(figsize=(10,6))

    ethnicity_list = unique_columns(df, 'Ethnicity')

    for ethnicity in ethnicity_list:
        filtered_df = df[df['Ethnicity'] == ethnicity]
        f_df = filtered_df.groupby('Stage').Smoking_Pack_Years.mean().reset_index()

        #plot line chart
        plt.plot(f_df['Stage'], f_df['Smoking_Pack_Years'], label=ethnicity) # line chart displays trend - for continuous data - which we HAVE
        #plt.scatter(f_df['Stage'], f_df['Smoking_Pack_Years'], label=ethnicity) # X - scatter plot displays correlation - for discrete data

    tui.started(f"Visualizing trend of smoking packs across cancer stages and ethnicities")
    tui.display_C2(plt)
    tui.completed()

def C3(df):
    # create a figure
    fig = plt.figure(figsize=(10,6))

    treatment_list = unique_columns(df, 'Treatment')

    # create the x-axis values
    x_axis = np.arange(len(treatment_list))

    treat_df = round(df.groupby('Treatment')[['Blood_Pressure_Systolic', 'Blood_Pressure_Diastolic', 'Blood_Pressure_Pulse']].mean(), 2).reset_index()

    tui.started(f"Visualizing blood pressure comparison across treatment types")
    tui.display_C3(x_axis, treat_df, treatment_list)
    tui.completed()

def C4(df):
    # Pie chart of smoking history percentages by tumor size and cancer stage
    # "Smoking_History", "Tumor_Size_mm", "Stage"

    found = False
    percentage = []
    tumor_size = 0
    cancer_stage = ""

    # List out all cancer stages
    print("List of lung cancer stages: ")
    unique_columns(df, 'Stage')

    cancer_stage = input("Enter a cancer stage: ").strip().lower()
    print()

    tumor_size = input("Enter minimum tumor size (mm): ").strip().lower()
    print()

    if tumor_size.isdigit():
        found = True
        tumor_size = float(tumor_size)

        filtered_df = df[(df['Stage'].str.lower() == cancer_stage) & (df['Tumor_Size_mm'] >= tumor_size)]

        total_smoker = filtered_df.shape[0]
        never_smoked = round((filtered_df[filtered_df['Smoking_History'] == 'Never Smoked'].shape[0]/total_smoker) * 100, 2)
        current_smoker = round((filtered_df[filtered_df['Smoking_History'] == 'Current Smoker'].shape[0]/total_smoker) * 100, 2)
        former_smoker = round((filtered_df[filtered_df['Smoking_History'] == 'Former Smoker'].shape[0]/total_smoker) * 100, 2)

        percentage = [never_smoked, current_smoker, former_smoker]

    tui.started(f"Visualizing smoking history percentages for tumor size >= {tumor_size} and lung cancer {cancer_stage}")
    tui.display_C4(found, percentage, tumor_size, cancer_stage)
    tui.completed()

###

'''

COL_MEDAL = 14
COL_TEAM = 6
COL_YEAR = 9

def list_years(data):
  tui.started("Listing years")
  years = set()
  for record in data:
    year = record[COL_YEAR]
    years.add(year)
  tui.display_years(years)
  tui.completed()

def tally_medals(data):
  tui.started("Tallying medals")
  medal_tally = {"Gold": 0, "Silver": 0, "Bronze": 0}
  for record in data:
    medal = record[COL_MEDAL]
    if medal in ("Gold", "Silver", "Bronze"):
      medal_tally[medal] += 1
  tui.display_medal_tally(medal_tally)
  tui.completed()

def tally_team_medals(data):
  tui.started("Tallying medals for each team")
  medal_tally = {}
  for record in data:
    team = record[COL_TEAM]
    medal = record[COL_MEDAL]

    if medal not in ("Gold", "Silver", "Bronze"):
      continue

    if team in medal_tally:
      medal_tally[team][medal] += 1
    else:
      medal_tally[team] = {"Gold": 0, "Silver": 0, "Bronze": 0}
      medal_tally[team][medal] += 1

  tui.display_team_medal_tally(medal_tally)
  tui.completed()

'''