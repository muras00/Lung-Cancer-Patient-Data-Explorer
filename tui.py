# -*- coding: utf-8 -*-
"""tui.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gqn4PwOgALm-7h3WEo5vuau47rNWMgFL
"""

# tui.py

import matplotlib.pyplot as plt

LINE_WIDTH = 85

def started(msg=""):
    output = f"Operation started: {msg}..."
    dashes = "-" * LINE_WIDTH
    print(f"{dashes}\n{output}\n")

def completed():
    dashes = "-" * LINE_WIDTH
    print(f"\nOperation completed.\n{dashes}\n")

def error(msg):
    print(f"Error! {msg}\n")

def display_menu():
    dashes = "-" * LINE_WIDTH
    msg = '''Please select one of the following options:

''' + dashes + '''
Get data using CSV module
''' + dashes + '''
[1] Retrieve Demographic Information by Patient ID
[2] Retrieve Medical History Details by Ethnicity
[3] Retrieve Patient Details by Treatment Type
[4] Retrieve the Frequency of Data Occurrences by Column

''' + dashes + '''
Analyse data using Pandas module
''' + dashes + '''
[5] Identify Top Three Treatments by Ethnicity
[6] Analyse Average White Blood Cell Counts by Ethnicity and Treatment Type
[7] Smoking Packs Analysis by Tumor Location and Treatment Type
[8] Survival Months Analysis by Cancer Stage and Treatment Type

''' + dashes + '''
Visualize data using Matplotlib module
''' + dashes + '''
[9] Proportion of Cancer Treatments by Ethnicity
[10] Trend of Smoking Packs Across Cancer Stages and Ethnicities
[11] Blood Pressure Comparison Across Treatment Types
[12] Smoking History Percentages by Tumor Size and Cancer Stage

''' + dashes + '''

[13] Exit application

    '''
    selected_option = input(msg)
    return selected_option.strip()

def display_A1(found, patient_info):
    if found == True:
        print("Age: ", patient_info["Age"], "\nGender: ", patient_info["Gender"],
              "\nSmoking history: ", patient_info["Smoking history"], "\nEthnicity: ", patient_info["Ethnicity"], "\n")
    else:
        # Else if - user input cannot be found
        print("Patient ID could not be found")

def display_A2(ethnicity_history, count):
    for i in range(0, count, 4):
        print("\nFamily history of lung cancer: ", ethnicity_history[i],
              "\nComorbidities of diabetes disease: ", ethnicity_history[i+1],
              "\nComorbidities of kidney disease: ", ethnicity_history[i+2],
              "\nHemoglobin level associated with ethnicity: ", ethnicity_history[i+3], "\n")

def display_A3(found, treatment_details, count):
    if found == True:
        for i in range(0, count, 4):
            print("\nAge: ", treatment_details[i],
                  "\nTumor size: ", treatment_details[i+1],
                  "\nTumor location: ", treatment_details[i+2],
                  "\nTumor stage: ", treatment_details[i+3], "\n")
    else:
        # Else if - user input cannot be found
        print("Treatment type could not be found")

def display_A4(found, item_dict):
    if found == True:

        sorted_item_dict = dict(sorted(item_dict.items()))

        for k, v in sorted_item_dict.items():
            print(f"{k}: {v}")
        print()
    else:
        # Else if - user input cannot be found
        print("Please select an appropriate column")

def display_B1(ethnicity, treat_df):
    print(f"\nThe top three treatments for the ethnicity {ethnicity} are \n")
    print(treat_df.head(3).reset_index().to_markdown(tablefmt='github', index=False)) # headers='' to hide headers
    print()

def display_B2(treat_df, ethnicity):
    print(f"Average white blood cell counts for the ethnicity {ethnicity} and treatment type {treat_df.index[0]} \n")
    print(treat_df.reset_index().to_markdown(tablefmt='github', index=False))
    print()

def display_B3(t_df, tumor_location, treatment_type):
    print(f"Average smoking pack count for tumor location {tumor_location} and treatment type {treatment_type}\n")
    print(t_df.reset_index().to_markdown(tablefmt='github', index=False))
    print()

def display_B4(survival_df, cancer_stage, treatment_type):
    print(f"Average survival months for cancer {cancer_stage} and treatment type {treatment_type}\n")
    print(survival_df.reset_index().to_markdown(tablefmt='github', index=False))
    print()

def display_C1(t_df, ethnicity):
    # create a figure
    fig = plt.figure(figsize=(10,6))

    #plot bar chart
    plt.bar(t_df['Treatment'], t_df['Occurences'], color=['tab:pink','tab:purple','gray','brown']) # width=0.8 is the default
    # bar chart - category comparison - More flexible for comparing absolute counts or percentages.

    # create a label for x-axis and y-axis
    plt.xlabel("Treatment type")
    plt.ylabel("Occurences")

    # create a title for your graph
    plt.title(f"Proportion of Cancer Treatments by Ethnicity ({ethnicity})")

    plt.show() # show the graph

def display_C2(plt):
    # create a label for x-axis and y-axis
    plt.xlabel('Cancer Stage')
    plt.ylabel('Average Smoking Pack Years')

    # create a title and a legend for your graph
    plt.title(f"Trend of Smoking Packs Across Cancer Stages and Ethnicities")
    plt.legend(title='Ethnicity', loc='lower right')
    plt.grid(True)

    plt.show() # show the graph

def display_C3(x_axis, treat_df, treatment_list):
    #plot bar chart
    bl = plt.bar(x_axis-0.2, treat_df['Blood_Pressure_Systolic'], width=0.5, label='Blood_Pressure_Systolic')
    bl2 = plt.bar(x_axis, treat_df['Blood_Pressure_Diastolic'], width=0.5, label='Blood_Pressure_Diastolic')
    bl3 = plt.bar(x_axis+0.2, treat_df['Blood_Pressure_Pulse'], width=0.5, label='Blood_Pressure_Pulse')
    # bar chart - category comparison (treatment types) - easier to see differences since side to side
    # NOT line chart - no trends over progression or time series are shown

    plt.bar_label(bl, label_type='center', padding=100)
    plt.bar_label(bl2, label_type='center', padding=93)
    plt.bar_label(bl3, label_type='center')

    # label the x-axis
    plt.xticks(x_axis, treatment_list)

    # create a label for x-axis and y-axis
    plt.xlabel('Treatment type')
    plt.ylabel('Average Blood Pressure')

    # create a title and a legend for your graph
    plt.title(f"Blood Pressure Comparison Across Treatment Types")
    plt.legend(title='Blood Pressure Type', loc='lower right')

    plt.show() # show the graph

def display_C4(found, percentage, tumor_size, cancer_stage):
    if found == True:
        smoking_history = ['Never Smoked', 'Current Smoker', 'Former Smoker']

        # create a figure
        fig = plt.figure()

        # plot pie chart
        plt.pie(percentage, labels=smoking_history, autopct='%1.1f%%')

        # create a title for your graph
        plt.title(f"Smoking history for tumor size >= {tumor_size} and lung cancer {cancer_stage}")

        plt.show()
    else:
        # Else if - user input cannot be found
        print("Please enter a valid tumor size")