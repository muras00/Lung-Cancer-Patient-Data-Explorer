# -*- coding: utf-8 -*-
"""tui.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gqn4PwOgALm-7h3WEo5vuau47rNWMgFL
"""

# tui.py

import matplotlib.pyplot as plt
import numpy as np

LINE_WIDTH = 85

def started(msg=""):
    output = f"Operation started: {msg}..."
    dashes = "-" * LINE_WIDTH
    print(f"{dashes}\n{output}\n")

def completed():
    dashes = "-" * LINE_WIDTH
    print(f"\nOperation completed.\n{dashes}\n")

def error(msg):
    print(f"Error! {msg}\n")

def display_menu():
    dashes = "-" * LINE_WIDTH
    msg = '''Please select one of the following options:

''' + dashes + '''
Get data using CSV module
''' + dashes + '''
[1] Retrieve Demographic Information by Patient ID
[2] Retrieve Medical History Details by Ethnicity
[3] Retrieve Patient Details by Treatment Type
[4] Retrieve the Frequency of Data Occurrences by Column

''' + dashes + '''
Analyse data using Pandas module
''' + dashes + '''
[5] Identify Top Three Treatments by Ethnicity
[6] Analyse Average White Blood Cell Counts by Ethnicity and Treatment Type
[7] Smoking Packs Analysis by Tumor Location and Treatment Type
[8] Survival Months Analysis by Cancer Stage and Treatment Type

''' + dashes + '''
Visualize data using Matplotlib module
''' + dashes + '''
[9] Proportion of Cancer Treatments by Ethnicity
[10] Trend of Smoking Packs Across Cancer Stages and Ethnicities
[11] Blood Pressure Comparison Across Treatment Types
[12] Smoking History Percentages by Tumor Size and Cancer Stage

''' + dashes + '''

[13] Exit application

    '''
    selected_option = input(msg)
    return selected_option.strip()

def display_A1(found, patient_info):
    if found == True:
        print("Age: ", patient_info["Age"], "\nGender: ", patient_info["Gender"],
              "\nSmoking history: ", patient_info["Smoking history"], "\nEthnicity: ", patient_info["Ethnicity"], "\n")
    else:
        # Else if - user input cannot be found
        print("Patient ID could not be found")

def display_A2(ethnicity_history, count):
    for i in range(0, count, 4):
        print("\nFamily history of lung cancer: ", ethnicity_history[i],
              "\nComorbidities of diabetes disease: ", ethnicity_history[i+1],
              "\nComorbidities of kidney disease: ", ethnicity_history[i+2],
              "\nHemoglobin level associated with ethnicity: ", ethnicity_history[i+3], "\n")

def display_A3(found, treatment_details, count):
    if found == True:
        for i in range(0, count, 4):
            print("\nAge: ", treatment_details[i],
                  "\nTumor size: ", treatment_details[i+1],
                  "\nTumor location: ", treatment_details[i+2],
                  "\nTumor stage: ", treatment_details[i+3], "\n")
    else:
        # Else if - user input cannot be found
        print("Treatment type could not be found")

def display_A4(found, item_dict):
    if found == True:

        sorted_item_dict = dict(sorted(item_dict.items()))

        for k, v in sorted_item_dict.items():
            print(f"{k}: {v}")
        print()
    else:
        # Else if - user input cannot be found
        print("Please select an appropriate column")

def display_B1(ethnicity, treat_df):
    print(f"\nThe top three treatments for the ethnicity {ethnicity} are \n")
    print(treat_df.head(3).reset_index().to_markdown(tablefmt='github', index=False)) # headers='' to hide headers
    print()

def display_B2(treat_df, ethnicity):
    print(f"Average white blood cell counts for the ethnicity {ethnicity} and treatment type {treat_df.index[0]} \n")
    print(treat_df.reset_index().to_markdown(tablefmt='github', index=False))
    print()

def display_B3(t_df, tumor_location, treatment_type):
    print(f"Average smoking pack count for tumor location {tumor_location} and treatment type {treatment_type}\n")
    print(t_df.reset_index().to_markdown(tablefmt='github', index=False))
    print()

def display_B4(survival_df, cancer_stage, treatment_type):
    print(f"Average survival months for cancer {cancer_stage} and treatment type {treatment_type}\n")
    print(survival_df.reset_index().to_markdown(tablefmt='github', index=False))
    print()

def display_C1(t_df, ethnicity):
    # create a figure
    fig = plt.figure(figsize=(10,6))

    #plot bar chart
    plt.bar(t_df['Treatment'], t_df['Occurences'], color=['tab:pink','tab:purple','gray','brown']) # width=0.8 is the default
    # bar chart - category comparison - More flexible for comparing absolute counts or percentages.

    # create a label for x-axis and y-axis
    plt.xlabel("Treatment type")
    plt.ylabel("Occurences")

    # create a title for your graph
    plt.title(f"Proportion of Cancer Treatments by Ethnicity ({ethnicity})")

    plt.show() # show the graph

def display_C2(plt):
    # create a label for x-axis and y-axis
    plt.xlabel('Cancer Stage')
    plt.ylabel('Average Smoking Pack Years')

    # create a title and a legend for your graph
    plt.title(f"Trend of Smoking Packs Across Cancer Stages and Ethnicities")
    plt.legend(title='Ethnicity', loc='lower right')
    plt.grid(True)

    plt.show() # show the graph

def display_C3(x_axis, treat_df, treatment_list):
    #plot bar chart
    bl = plt.bar(x_axis-0.2, treat_df['Blood_Pressure_Systolic'], width=0.5, label='Blood_Pressure_Systolic')
    bl2 = plt.bar(x_axis, treat_df['Blood_Pressure_Diastolic'], width=0.5, label='Blood_Pressure_Diastolic')
    bl3 = plt.bar(x_axis+0.2, treat_df['Blood_Pressure_Pulse'], width=0.5, label='Blood_Pressure_Pulse')
    # bar chart - category comparison (treatment types) - easier to see differences since side to side
    # NOT line chart - no trends over progression or time series are shown

    plt.bar_label(bl, label_type='center', padding=100)
    plt.bar_label(bl2, label_type='center', padding=93)
    plt.bar_label(bl3, label_type='center')

    # label the x-axis
    plt.xticks(x_axis, treatment_list)

    # create a label for x-axis and y-axis
    plt.xlabel('Treatment type')
    plt.ylabel('Average Blood Pressure')

    # create a title and a legend for your graph
    plt.title(f"Blood Pressure Comparison Across Treatment Types")
    plt.legend(title='Blood Pressure Type', loc='lower right')

    plt.show() # show the graph

def display_C4(found, percentage, tumor_size, cancer_stage):
    if found == True:
        smoking_history = ['Never Smoked', 'Current Smoker', 'Former Smoker']

        # create a figure
        fig = plt.figure()

        # plot pie chart
        plt.pie(percentage, labels=smoking_history, autopct='%1.1f%%')

        # create a title for your graph
        plt.title(f"Smoking history for tumor size >= {tumor_size} and lung cancer {cancer_stage}")

        plt.show()
    else:
        # Else if - user input cannot be found
        print("Please enter a valid tumor size")

###

'''

# process.py

def unique_columns(df, column_name):
    column_name_list = df[column_name].unique()

    for d in column_name_list:
        print(d)
        d = d.lower()
    return column_name_list

def A1(data):
    patient_ID = input("Enter a patient ID: ").strip()

    found = False
    patient_info = {"Age": "", "Gender": "", "Smoking history": "", "Ethnicity": ""}

    if patient_ID in data[0]:
        found = True
        data = data[(data[0] == patient_ID)]
        #data[(data[0] == patient_ID)][1]
        patient_info = {"Age": data[1], "Gender": data[2], "Smoking history": data[3], "Ethnicity": data[9]}

    display_A1(found, patient_info)

def A2(data):
    # List out all ethnicities
    ethnicity_list = []
    print("List of ethnicities: ")

    for r in data:
        if r[9].lower() not in ethnicity_list:
            ethnicity_list.append(r[9].lower())
            print(r[9])
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()
    count = input("Enter the amount of display data (all data will be displayed if left blank): ").strip()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    ethnicity_history = []

    for r in data:
        if(r[9].lower() == ethnicity):
            ethnicity_history.append(r[11])
            ethnicity_history.append(r[12])
            ethnicity_history.append(r[16])
            ethnicity_history.append(r[23])

    if count.isdigit() and len(ethnicity_history) > (int(count) * 4):
        count = int(count) * 4
    else:
        count = len(ethnicity_history)

    display_A2(ethnicity_history, count)

def A3(data):
    # List out all treatment types
    treatment_list = []
    print("List of treatment types: ")

    for r in data:
        if r[7].lower() not in treatment_list:
            treatment_list.append(r[7].lower())
            print(r[7])

    treatment = input("Enter a treatment type: ").strip().lower()
    count = input("Enter the amount of display data (all data will be displayed if left blank): ").strip()

    found = False
    treatment_details = []

    if treatment in treatment_list:
        found = True
        for r in data:
            if(r[7].lower() == treatment and int(r[8]) > 100):
                treatment_details.append(r[1])
                treatment_details.append(r[4])
                treatment_details.append(r[5])
                treatment_details.append(r[6])

    if count.isdigit() and len(treatment_details) > (int(count) * 4):
      count = int(count) * 4
    else:
      count = len(treatment_details)

    display_A3(found, treatment_details, count)

def A4(data, headings):
    # Retrieve the frequency of data occurrences by column
    # Columns 1, 2, 3, 5 to 22

    columns = {}
    reversed_columns = {}
    index = 0

    for h in headings:
        if h != "Patient_ID" and h != "Tumor_Size_mm":
            columns[h] = index
            reversed_columns[index] = h
            if h == "Blood_Pressure_Pulse":
                break
        index += 1

    print("Please select the column items to display: ")
    index = 0
    for k, v in columns.items():
        index += 1
        print(f"[{index}] {k}")

    found = False

    selected_column = input().strip()
    if selected_column.isdigit():
        selected_column = int(selected_column)

        if selected_column > 3:
            selected_column += 1

        if selected_column in reversed_columns.keys():
            found = True

            print(f"Selected column: {reversed_columns[selected_column]}\n")

            item_dict = {}

            for r in data:
                if reversed_columns[selected_column] != "Stage":
                    key = reversed_columns[selected_column] + " " + r[selected_column]
                else:
                    key = r[selected_column]

                if key not in item_dict.keys():
                    item_dict[key] = 1
                else:
                    value = item_dict[key]
                    item_dict[key] = value + 1

            display_A4(found, item_dict)

def B1(df):
    # List out all ethnicities
    print("List of ethnicities: ")
    ethnicity_list = unique_columns(df, 'Ethnicity')
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    filtered_df = df[(df['Ethnicity'].str.lower() == ethnicity) & (df['Survival_Months'] > 100)]
    treat_df = filtered_df.groupby('Treatment').size().sort_values(inplace =False, ascending=False)
    treat_df = treat_df.rename('Occurences')

    display_B1(ethnicity, treat_df)

def B2(df):
    # List out all ethnicities
    print("List of ethnicities: ")
    ethnicity_list = unique_columns(df, 'Ethnicity')
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()
    print()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    # List out all treatment types
    print("List of treatment types: ")
    unique_columns(df, 'Treatment')

    treatment_type = input("Enter a treatment type: ").strip().lower()
    print()

    filtered_df = df[(df['Ethnicity'].str.lower() == ethnicity) & (df['Treatment'].str.lower() == treatment_type)]

    treat_df = round(filtered_df.groupby('Treatment').White_Blood_Cell_Count.mean(), 2)

    display_B2(treat_df, ethnicity)

def B3(df):
    # List out all tumor locations
    print("List of tumor locations: ")
    unique_columns(df, 'Tumor_Location')

    tumor_location = input("Enter a tumor location: ").strip().lower()
    print()

    filtered_df = df[(df['Blood_Pressure_Pulse'] > 90) & (df['Tumor_Size_mm'] < 15.0)]

    # List out all treatment types
    print("List of treatment types: ")
    unique_columns(df, 'Treatment')

    treatment_type = input("Enter a treatment type: ").strip().lower()
    print()

    treat_df = filtered_df[(filtered_df['Tumor_Location'].str.lower() == tumor_location) & (filtered_df['Treatment'].str.lower() == treatment_type)]
    t_df = round(treat_df.groupby(['Treatment', 'Tumor_Location']).Smoking_Pack_Years.mean(), 2)

    display_B3(t_df, tumor_location, treatment_type)

def B4(df):
    # Average survival months for specific cancer stage and treatment type
    # "Stage" ... Stage I, II, III, IV ... "Treatment" and "Survival_Months"

    # List out all cancer stages
    print("List of lung cancer stages: ")
    unique_columns(df, 'Stage')

    cancer_stage = input("Enter a cancer stage: ").strip().lower()
    print()

    # List out all treatment types
    print("List of treatment types: ")
    unique_columns(df, 'Treatment')

    treatment_type = input("Enter a treatment type: ").strip().lower()
    print()

    filtered_df = df[(df['Stage'].str.lower() == cancer_stage) & (df['Treatment'].str.lower() == treatment_type)]
    survival_df = round(filtered_df.groupby(['Treatment', 'Stage']).Survival_Months.mean(), 1)

    display_B4(survival_df, cancer_stage, treatment_type)

def C1(df):
    # List out all ethnicities
    print("List of ethnicities: ")
    ethnicity_list = unique_columns(df, 'Ethnicity')
    print()

    ethnicity = input("Enter an ethnicity: ").strip().lower()

    # Else if - user input cannot be found
    if ethnicity not in ethnicity_list:
        ethnicity = "other"

    filtered_df = df[(df['Ethnicity'].str.lower() == ethnicity)]
    treat_df = filtered_df.groupby('Treatment').size().sort_values(inplace=False, ascending=False)
    treat_df = treat_df.rename('Occurences')
    t_df = pd.DataFrame(treat_df.reset_index())

    display_C1(t_df, ethnicity)

def C2(df):
    # create a figure
    fig = plt.figure(figsize=(10,6))

    ethnicity_list = unique_columns(df, 'Ethnicity')

    for ethnicity in ethnicity_list:
        filtered_df = df[df['Ethnicity'] == ethnicity]
        f_df = filtered_df.groupby('Stage').Smoking_Pack_Years.mean().reset_index()

        #plot line chart
        plt.plot(f_df['Stage'], f_df['Smoking_Pack_Years'], label=ethnicity) # line chart displays trend - for continuous data - which we HAVE
        #plt.scatter(f_df['Stage'], f_df['Smoking_Pack_Years'], label=ethnicity) # X - scatter plot displays correlation - for discrete data

    display_C2(plt)

def C3(df):
    # create a figure
    fig = plt.figure(figsize=(10,6))

    treatment_list = unique_columns(df, 'Treatment')

    # create the x-axis values
    x_axis = np.arange(len(treatment_list))

    treat_df = round(df.groupby('Treatment')[['Blood_Pressure_Systolic', 'Blood_Pressure_Diastolic', 'Blood_Pressure_Pulse']].mean(), 2).reset_index()

    display_C3(x_axis, treat_df, treatment_list)

def C4(df):
    # Pie chart of smoking history percentages by tumor size and cancer stage
    # "Smoking_History", "Tumor_Size_mm", "Stage"

    # List out all cancer stages
    print("List of lung cancer stages: ")
    unique_columns(df, 'Stage')

    cancer_stage = input("Enter a cancer stage: ").strip().lower()
    print()

    tumor_size = input("Enter minimum tumor size (mm): ").strip().lower()
    print()

    if tumor_size.isdigit():
        tumor_size = float(tumor_size)

        filtered_df = df[(df['Stage'].str.lower() == cancer_stage) & (df['Tumor_Size_mm'] >= tumor_size)]

        total_smoker = filtered_df.shape[0]
        never_smoked = round((filtered_df[filtered_df['Smoking_History'] == 'Never Smoked'].shape[0]/total_smoker) * 100, 2)
        current_smoker = round((filtered_df[filtered_df['Smoking_History'] == 'Current Smoker'].shape[0]/total_smoker) * 100, 2)
        former_smoker = round((filtered_df[filtered_df['Smoking_History'] == 'Former Smoker'].shape[0]/total_smoker) * 100, 2)

        percentage = [never_smoked, current_smoker, former_smoker]

        display_C4(percentage, tumor_size, cancer_stage)

    else:
        print("Please enter a valid tumor size")

'''